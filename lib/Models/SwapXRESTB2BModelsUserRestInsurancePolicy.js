/**
 * SWAPXRESTB2BAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of SwapXRESTB2BModelsUserRestInsurancePolicy
 */
class SwapXRESTB2BModelsUserRestInsurancePolicy extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.quoteId = this.constructor.getValue(obj.quoteId);
        this.policyId = this.constructor.getValue(obj.policyId);
        this.policyNumber = this.constructor.getValue(obj.policyNumber);
        this.insuranceType = this.constructor.getValue(obj.insuranceType);
        this.startDate = this.constructor.getValue(obj.startDate);
        this.endDate = this.constructor.getValue(obj.endDate);
        this.issueDate = this.constructor.getValue(obj.issueDate);
        this.totalPrice = this.constructor.getValue(obj.totalPrice);
        this.frequency = this.constructor.getValue(obj.frequency);
        this.status = this.constructor.getValue(obj.status);
        this.policyHolderId = this.constructor.getValue(obj.policyHolderId);
        this.travelInsurancePolicy = this.constructor.getValue(obj.travelInsurancePolicy);
        this.medicalInsurancePolicy = this.constructor.getValue(obj.medicalInsurancePolicy);
        this.gadgetInsurancePolicy = this.constructor.getValue(obj.gadgetInsurancePolicy);
        this.collisionInsurancePolicy = this.constructor.getValue(obj.collisionInsurancePolicy);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'quoteId', realName: 'quoteId' },
            { name: 'policyId', realName: 'policyId' },
            { name: 'policyNumber', realName: 'policyNumber' },
            { name: 'insuranceType', realName: 'insuranceType' },
            {
                name: 'startDate',
                realName: 'startDate',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            { name: 'endDate', realName: 'endDate', isDateTime: true, dateTimeValue: 'rfc3339' },
            {
                name: 'issueDate',
                realName: 'issueDate',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            { name: 'totalPrice', realName: 'totalPrice' },
            { name: 'frequency', realName: 'frequency' },
            { name: 'status', realName: 'status' },
            { name: 'policyHolderId', realName: 'policyHolderId' },
            {
                name: 'travelInsurancePolicy',
                realName: 'travelInsurancePolicy',
                type: 'SwapXRESTB2BModelsInsuranceRestTravelInsuranceProperties',
            },
            {
                name: 'medicalInsurancePolicy',
                realName: 'medicalInsurancePolicy',
                type: 'SwapXRESTB2BModelsInsuranceRestMedicalInsuranceProperties',
            },
            {
                name: 'gadgetInsurancePolicy',
                realName: 'gadgetInsurancePolicy',
                type: 'SwapXRESTB2BModelsInsuranceRestGadgetInsuranceProperties',
            },
            {
                name: 'collisionInsurancePolicy',
                realName: 'collisionInsurancePolicy',
                type: 'SwapXRESTB2BModelsInsuranceRestCollisionInsuranceProperties',
            },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = SwapXRESTB2BModelsUserRestInsurancePolicy;
