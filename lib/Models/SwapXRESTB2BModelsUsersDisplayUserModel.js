/**
 * SWAPXRESTB2BAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of SwapXRESTB2BModelsUsersDisplayUserModel
 */
class SwapXRESTB2BModelsUsersDisplayUserModel extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.mobileNumberCountryId = this.constructor.getValue(obj.mobileNumberCountryId);
        this.mobileNumber = this.constructor.getValue(obj.mobileNumber);
        this.wallets = this.constructor.getValue(obj.wallets);
        this.organisationGroupId = this.constructor.getValue(obj.organisationGroupId);
        this.organisationGroupName = this.constructor.getValue(obj.organisationGroupName);
        this.cardId = this.constructor.getValue(obj.cardId);
        this.cardInfo = this.constructor.getValue(obj.cardInfo);
        this.cardToken = this.constructor.getValue(obj.cardToken);
        this.hasCard = this.constructor.getValue(obj.hasCard);
        this.isCardActive = this.constructor.getValue(obj.isCardActive);
        this.isCardBlocked = this.constructor.getValue(obj.isCardBlocked);
        this.isCardBlockedBySwapx = this.constructor.getValue(obj.isCardBlockedBySwapx);
        this.lastActiveDate = this.constructor.getValue(obj.lastActiveDate);
        this.kycStatus = this.constructor.getValue(obj.kycStatus);
        this.id = this.constructor.getValue(obj.id);
        this.firstName = this.constructor.getValue(obj.firstName);
        this.lastName = this.constructor.getValue(obj.lastName);
        this.email = this.constructor.getValue(obj.email);
        this.isDisabled = this.constructor.getValue(obj.isDisabled);
        this.emailConfirmed = this.constructor.getValue(obj.emailConfirmed);
        this.mobileNumberConfirmed = this.constructor.getValue(obj.mobileNumberConfirmed);
        this.dateOfBirth = this.constructor.getValue(obj.dateOfBirth);
        this.countryId = this.constructor.getValue(obj.countryId);
        this.address1 = this.constructor.getValue(obj.address1);
        this.address2 = this.constructor.getValue(obj.address2);
        this.city = this.constructor.getValue(obj.city);
        this.postCode = this.constructor.getValue(obj.postCode);
        this.accountBlocked = this.constructor.getValue(obj.accountBlocked);
        this.isDeleted = this.constructor.getValue(obj.isDeleted);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'mobileNumberCountryId', realName: 'mobileNumberCountryId' },
            { name: 'mobileNumber', realName: 'mobileNumber' },
            {
                name: 'wallets',
                realName: 'wallets',
                array: true,
                type: 'SwapXRESTB2BModelsWalletsUserWalletModel',
            },
            { name: 'organisationGroupId', realName: 'organisationGroupId' },
            { name: 'organisationGroupName', realName: 'organisationGroupName' },
            { name: 'cardId', realName: 'cardId' },
            { name: 'cardInfo', realName: 'cardInfo' },
            { name: 'cardToken', realName: 'cardToken' },
            { name: 'hasCard', realName: 'hasCard' },
            { name: 'isCardActive', realName: 'isCardActive' },
            { name: 'isCardBlocked', realName: 'isCardBlocked' },
            { name: 'isCardBlockedBySwapx', realName: 'isCardBlockedBySwapx' },
            {
                name: 'lastActiveDate',
                realName: 'lastActiveDate',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            { name: 'kycStatus', realName: 'kycStatus' },
            { name: 'id', realName: 'id' },
            { name: 'firstName', realName: 'firstName' },
            { name: 'lastName', realName: 'lastName' },
            { name: 'email', realName: 'email' },
            { name: 'isDisabled', realName: 'isDisabled' },
            { name: 'emailConfirmed', realName: 'emailConfirmed' },
            { name: 'mobileNumberConfirmed', realName: 'mobileNumberConfirmed' },
            {
                name: 'dateOfBirth',
                realName: 'dateOfBirth',
                isDateTime: true,
                dateTimeValue: 'rfc3339',
            },
            { name: 'countryId', realName: 'countryId' },
            { name: 'address1', realName: 'address1' },
            { name: 'address2', realName: 'address2' },
            { name: 'city', realName: 'city' },
            { name: 'postCode', realName: 'postCode' },
            { name: 'accountBlocked', realName: 'accountBlocked' },
            { name: 'isDeleted', realName: 'isDeleted' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = SwapXRESTB2BModelsUsersDisplayUserModel;
