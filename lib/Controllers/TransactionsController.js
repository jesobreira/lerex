/**
 * SWAPXRESTB2BAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class TransactionsController {
    /**
     * Get organisation activity (all fields are optional and used for filtering)
     *
     * @param {uuid|string} userId (optional) userId
     * @param {int} currencyId (optional) CurrencyId
     * @param {string} filter (optional) Filter keyword
     * @param {int} pageSize (optional) Record per page
     * @param {int} page (optional) Page index
     * @param {dateTime} startDate (optional) From date
     * @param {dateTime} endDate (optional) To date
     * @param {SortBy1Enum} sortBy (optional) The sort by.
     * @param {OrderByEnum} orderBy (optional) The order by.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getTransactionsGetUserActivity(userId,
        currencyId,
        filter,
        pageSize,
        page,
        startDate,
        endDate,
        sortBy,
        orderBy,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        const _pathUrl = '/api/rest/transactions/user-activity';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            userId,
            currencyId,
            filter,
            pageSize,
            page,
            startDate: _apiHelper.stringifyDateTime(startDate, 'rfc3339'),
            endDate: _apiHelper.stringifyDateTime(endDate, 'rfc3339'),
            sortBy: (sortBy !== null) ? sortBy : null,
            orderBy: (orderBy !== null) ? orderBy : null,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = parsed.map(model =>
                        _baseController.getObjectMapper().mapObject(model, 'SwapXRESTB2BModelsTransactionsUserTransactionModel'));
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * Get details for a given transaction
     *
     * @param {int} id The transaction identifier.
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getTransactionsTransactionDetail(id, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _pathUrl = '/api/rest/transactions/{id}';
        // process template parameters
        _pathUrl = _apiHelper.appendUrlWithTemplateParameters(_pathUrl, {
            id,
        });

        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'SwapXRESTB2BModelsTransactionsUserTransactionModel');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = TransactionsController;
